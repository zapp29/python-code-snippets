@startuml
title Traditional dependencies

package service_one {
  class ServiceOne {
    make_one()
  }
}

package service_two {
  class ServiceTwo {
    make_two()
  }
}

package app {
  class App {
    run(service_one: ServiceOne, \n\tservice_two: ServiceTwo)
  }
  App -.> .ServiceOne: executes
  App -.> .ServiceTwo: executes
  App --> .ServiceOne: depends on
  App --> .ServiceTwo: depends on
}

@enduml
@startuml
title Dependency Injection

package services {
  class ServiceFactory {
    make_service()
  }
  ServiceFactory -up-|> app.AbstractServiceFactory

  class ServiceOne {
    make_one()
  }
  ServiceOne -up-|> app.OneMaker

  class ServiceTwo {
    make_two()
  }
  ServiceTwo -up-|> app.TwoMaker

}

package app {
  abstract OneMaker {
    {abstract} make_one()
  }
  abstract TwoMaker {
    {abstract} make_two()
  }
  abstract AbstractServiceFactory {
    {abstract} make_service()
  }
  abstract AbstractAppFactory {
    {abstract} make_app()
  }
  class App {
    run(one_maker: OneMaker, \n\ttwo_maker: TwoMaker)
  }
  App -left-> OneMaker: depends on
  App -right-> TwoMaker: depends on
}

package main {
  class AppFactory {
    make_app()
  }
  AppFactory --|> app.AbstractAppFactory
  AppFactory --> app.App: depends on
}
main --> ServiceOne: depends on
main --> ServiceTwo: depends on
main --> ServiceFactory: depends on

@enduml